

OPÆA GIMNAZIJA ZENICA,
2002. GOD.











MATURSKI RAD IZ INFORMATIKE
NA TEMU:


" SORTIRANJE NIZOVA U PASCALU"













Uèenik:  Nedim Hadzimahmutovic |V-2, grungy@linux.org.ba

Mentor:  Seno Piliæ




Sadr¾aj:

1. Uvod
2. Uvod u programiranje i informatiku
3. Uvod u pascal
4. Sintaksa a. Struktura programa i Write funkcija
 b. Readln funkcija
 c. Osnovni tipovi podataka
 d. Pridru¾ivanje
5. Sortiranje nizova i algoritmi za sortiranje



------------------------------------------------------------------

1. Uvod u programiranje i informatiku

Programiranje je slo¾en proces. U osnovi predstavlja proces kreiranja niza (skupa) logickih koraka s ciljem rijesavanja odredjenog problema. Ovaj niz koraka naziva se program.

Optimalni koraci kod razvoja programa:

1. Analiza problema
2. Izbor rijesenja
3. Implementacija rijesenja
4. Testiranje.

U procesu programiranja covjek koristi programski jezik koji u osnovi predstavlja nacin komunikacije izmedju covjeka i racunara. Termin koji je veoma vazan prilikom ovog procesa je "kompajler" (kompilator, eng. compiler). Kompajler je program koji prevodi instrukcije koje pise programer u formu citljivu kompijuteru (masinski jezik). Zaklucujemo, da je uvijek potrebno reci kompjuteru kako ce da nesto uradi i kompjuter ce to slijepo uraditi bez postavljanja pitanja, a jezik koji koristimo prilikom te komunikacije (covjek-racunar) je programski jezik. Dakle, programer = ucitelj masine. Masina je u stanju uraditi samo onoliko koliko programer moze da prenese na masinu, drugim rijecima: sposobnost masine zavisi od sposobnosti programera.

Neko ce reci : "Napravi program pomocu kojeg ce kompijuter letjeti".

To je svakako moguce, ako bi uspjeli napraviti komad hardvera koji ce podici kompijuter i to spojili sa kompijuterom onda bi stvarno napravili program koji ce analizirati okruzenje i omoguciti kompijuteru da leti. Ovo bi bilo moguce samo uz odgovarajuci hardver. Samo sto bi se to drugacije zvalo "Avion kojeg upravlja kompijuter" a ne "Kompijuter koji leti"



Da ponovim, programiranje je detaljno davanje instrukcija kompijuteru, nepostoji ni jedan korak koji kompijuter moze sam da uradi.(te instrukcije ostaju zapisane i nemoraju se unositi ponovo, potrebno je samo pokrenuti taj program,tj. instrukcije).

Kompijuter nemoze proizvesti nista novo, moze uraditi samo ono sto sto mu covjek moze i zna da naredi, moze analizirati ali nema moc da predpostavi povezanost ili tacnost, moze samo da asistira covjeka u radu sa necim vec poznatim. (predhodno definiranim)


Kompijuter se moze smatrati kako mehanizam na principu akcija - reakcija. Covjek uvjek pocne prvi davajuci "akciju" na koju kompijuter reaguje samo ako je dizajniran za to i ako je prepozna.

Zamislite ovaj problem:

Imamo dvije case boje, nazovimo ih Casa A i Casa B. Casa A ima crvenu boju a Casa B ima plavu boju. Problem je kako zamjeniti sadrzaj casa? Kako smjestiti plavu boju u Casu A a crvenu u Casu B ?

Nakon malo razmisljanja dolazi nam rijesenje a to je koristenje pomocne case C

Logicki niz koraka (algoritam) koji cemo slijediti je

1. premjesti sadrzaj case B (ili A ) u casu C 2. posto je casa B prazna u nju premjesti sadrzaj case A 3. posto je sada casa A prazna u nju premjesti sadrzaj case C 4. Kraj

Tako smo dobili zamjenu sadrzaja.

Ovo isto se moze uraditi i u pascalu, samo sto necemo koristiti case nego Variable i necemo koristiti boju nego brojeve koji ce oznacavati neku boju.

Ovaj problem se moze ovako postaviti:

Napisati program (u pascalu) koji ce zamijeniti sadrzaj variable A i B tipa byte. (Variabla - promjenljiva, mjesto gdje mozemo cuvati odredjenu kolicinu podataka)

var
a,b : byte;
c : byte; {pomocna variabla}
begin
a := 5;
b := 9;

c := a;
a := b;
b := c;
end.

Ukoliko bi ovo ponovo preveli na neki jezik razumljiv ljudima dobli li bi :

Alociraj 3 variable tipa byte u memoriji; daj im imena a,b,c
u variablu a smjesti broj 5
u variablu b smjesti broj 9

u variablu c smjesti sadrzaj variable a
u variablu a smjesti sadrzaj variable b
u variablu b smjesti sadrzaj variable c
Kraj Programa

Dakle, kompijuter bi "interpretirao" liniju po liniju naseg programa sve do kraja, nista nas nebi sprjecavalo da napisemo neki program koji nema smisla ali kompijuter nam ne bi dozvolio da pisemo program koji ne postuje pravila sintakse; jer je sintaksa precizno definirana.


Izgled "programa" koji rade istu stvar u razlicitim programskim jezicima:

-Napisati program koji ispisuje "Kako si ?" na terminal (konzolu).

Pascal:

Program Ispisi_Nesto_Na_Konzolu;
Begin
Writeln('Kako si ?');
End.

QBasic:

PRINT "Kako si ?"

C:

#include<stdio.h>
void main(void){
printf("Kako si ?\n");
}

Perl:

#!usr/bin/perl

printf("Kako si ?\n");



PHP:

<?php
echo "Kako si ?\n";
?>

TASM (Borland Turbo Assembler):

.MODEL TINY
.STACK
.DATA
nesto db "Kako si ?"
.CODE
main:
MOV AX,SEG nesto
MOV DS,AX

MOV DX,OFFSET nesto
MOV AH,09h
INT 21h

MOV AH,4Ch
INT 21h
ENDS
end main


Ono sto nas zanima na pocetku ucenja nekog programskog jezika jeste SINTAKSA i nacin na koji programski jezik rukuje sa podatcima, tome jos dodamo malo logike i spremni smo da pisemo programe. Na pocetku ce biti tesko jer ima previse novih informacija koje ulaze u nasu glavu so ce smanji nasu koncentraciju na sam problem... s vremenom to ce otici, potrebna je vjezba (pogotovo ako je ovo prvi programski jezik koji koristite).


4. Sintaksa

Sintaksa nekog programskog jezika je skup pravila koja se moraju postovati da bi pisali programe za taj programski jezik.

Kostur najjednostavnijeg pascal programa:

Program Ime_Programa;
Begin
End.

Ove dijelove programa ce te imati priliku da vidite u svim pascal programima jer jednostavno bez ovoga ni jedan program se nemoze pokrenuti.

(Izuzetaka ima , npr. u Turbo Pascalu 7.0 slobodno mozete izostaviti Program Ime_Programa dok u nekim verzijama to nesmijete raditi. U nekim starijim verzijama potrebno je naglasiti Input,Output, npr Program NekiProg(Input,Output); u verziji 7.0 to nije potrebno)

Prvo pravilo je to, dakle da svaki program mora da pocne sa kljucnom rijecju "Program" poslije koje treba da se stavi vazece ime programa.

Svaka komanda u Pascalu mora da zavrsava sa ";" izuzetci su: Zadnji End u programu, Var, Type, Begin, Const... i drugi, koje cemo kasnije analizirati.

Moguce je imati vise begin-end konstrukcija u jednom programu, i svaki end mora imati ; na kraju osim onog zadnjeg koji oznacava kraj programa(iza njega se stavlja tacka "." ).

Dozvoljena imena bilo variabli,konstanti, tipova podataka, imena programa, imena procedura i funkcija, itd. su samo ona koja pocinju sa nekim od slova (malih ili velkih), mogu sadrzati brojeve i znak "_" , nesmiju imati razmak " " i nesmiju se vise puta upotrebljavati.

par primjera :


Jako_Dugo_Ime_koje_se_smije_UpOtrebljavati_u_programu
jabuka
temp1
temp23
TEmP22000
broj_sati

par nevazecih primjera:

2442abc
1temp
broj sati


Napomena: Pascal ne razlikuje velika i mala slova tako da variabla broj i BROJ su identicne i pascal ih smatra istom variablom. (broj = broJ = BrOj= Broj)


----------------------------------------------

a. Struktura programa i Write funkcija

Kao sto vec znate svaki program mora imati program,begin i end.

Par primjera:


Program Ispisi_Hello; {Program koji ispisuje Hello} Begin { Pocetak programa } Write('Hello'); { Jedina komanda, instrukcija, funkcija, poziv na funkciju. ..} End. { Kraj programa}


Sigurno ste primjetili kako ovaj program ima neke dodatne "komentare" sa desne strane. To zapravo i jesu komentari, koji nemaju nikakav efekat na rad programa. Tu su samo da bi nama olaksali citanje programa.

Svaki komentar pocinje sa { i traje sve do znaka }

Ovaj gore program ce ispisati Hello na ekran.


Hello


Ovdje smo koristili proceduru (komandu Write). Write ili WriteLn se koristi za ispis na ekran. Razlika izmedju Write i WriteLn je u tome sto nakon ispisa Write ne prelazi u novi red dok WriteLn prelazi.

primjer 2:

Program Testiraj_Write; {Program za eksperimentisanje sa Write i WriteLn}
Begin
Write('Prva linija ');
Write('Druga linija ');
WriteLn('Treca linija ');
WriteLn('Cetvrta linija ');
End.

Izlaz ovog programa je :


Prva linija Druga linija Treca linija
Cetvrta linija


Parametri koje ova procedura prima mogu biti variable ili konstante.

Imamo dva tipa konstanti brojcane i simbolicke.

Brojcana konstanta je npr. broj 10

ukoliko zelimo da ispisemo broj 10 na ekran, mozemo to uraditi na dva nacina

WriteLn(10);

i

WriteLn('10');

Obadva nacina ce imati isti rezultat. Razlika je samo u tome sto je u prvom slucaju broj 10 proslijedjen kao numericka konstanta a u drugom kao simbolicka (tj. niz znakova).

Mozemo i ovako :


Writeln(20-10);

Ovo ce takodje imati isti efekat, tj. ispis broja 10 na ekran.


dok Writeln('20' - '10'); je greska jer nije moguce vrsiti matematicke operacije sa simbolickim konstantama.


Pascal podrzava 4 osnovne matematicke operacije nad brojcanim konstantama.

+ sabiranje
oduzimanje
mnozenje / djeljenje.

npr.

10 + 7 + 44
8 * 3
11 / 3
10 - 35

itd..

jos jedan primjer:

Program Moj_COol_program;
 Begin Writeln('*********************************');
  Writeln('* Das myne cool program *');
  Writeln('* *');
  Writeln('* autor: Ja *');
  Writeln('* *');
  Writeln('* Program koji neradi nista... *');
  Writeln('*********************************');
 End.


Izlaz :

*********************************
Das myne cool program *

autor: Ja *

Program koji neradi nista... * *********************************


----------------------------------------------

b. Readln funkcija

ReadLn (read line - citaj liniju)

Procedura koju koristimo za "unos" podataka sa tastature jeste Read ili ReadLn. Read mozemo zaboraviti na trenutak i odmah predjimo na ReadLn.

Kako i samo ime govori ova procedura "cita". Da vidimo kako.

Program moj_prvi_program_sa_readln;
var
ime : String;
Begin
Write('Kako se zoves ? ');
Readln(ime); Writeln('HEJ! da se ti slucajno ne zoves ',ime,' ??'); End.

Izlaz ovoga programa zavisi od toga sta unesete :) kod mene ide ovako :

Kako se zoves ? Mirza <enter> HEJ! da se ti slucajno ne zoves Mirza ??

U Readln moguce je staviti bilo koju variablu (od onih standardnih). Ono sto korisnik unese biva smijesteno u variablu koju smo stavili prilikom poziva na Readln proceduru.

Program neki_programX2;
Var
godine : byte;
ime,prezime,adresa,e_mail : String;
Begin
Write('Ime : ');
Readln(ime);

Write('Prezime : ');
Readln(prezime);

Write('Koliko imate godina : ');
Readln(godine);

Write('adresa : ');
Readln(adresa);

Writeln('e-mail : ');
Readln(e_mail);

Writeln('Vasi licni podatci : ');
Writeln('Ime : ',ime);
Writeln('Prezime : ',prezime);
Writeln('Adresa : ',adresa);
Writeln('e-mail : ',e_mail);
Writeln;
Writeln('Have a nice day!');
End.


Writeln; - bez parametara samo prelazi u novi red, a Readln; ceka pritisak na enter.




----------------------------------------------

c. Osnovni tipovi podataka

Mozemo ih podjeliti na dva : numericki i simbolicki.

Numericki(brojcani) :

Byte : 0..255
Word : 0..65535
ShortInt: -128..127
Integer : -32768..32767
LongInt : -2147483648..2147483647

Simbolicki:

Char
String

Numericki ili brojcani se koriste sa pohranu brojeva imamo vise vrsta brojcanih "variabli", gore spomenute su samo za cijelobrojne brojeve i naravno imaju svoj odgovarajuci "domet".

Osnovni simbolicki tip je Char i moze da u sebi "drzi" jedno "slovo" tj. karakter. String je nastao od Char-a tako sto je napravljen niz Char variabli (nijih 255) tako da String moze da zadrzi maksimalno 255 slova tj. karaktera u sebi.

Ovi tipovi (kao i mnogi drugi) se koriste pri definisanju ili deklarisanju variabli koje namjeravmo koristiti u nasem programu.

Mjesto gdje se definisu variable je prije glavnog "Begin" -a u programu i
poslije "Program ime_programa;" Oznaka za deklarisanje variabli je "var"

primjer:

Program Moj_Prvi_Program_sa_variablama;
Var
broj : byte;
malo_veci_broj : Word;
pravo_velik_broj : LongInt;
Begin
{Neki kod koji sada nisam napisao a koji bi vjerovatno koristio ove gore variable.
}
End.

Sada se pitate sta sa svim ovim variablama. Tu su da drzimo neke "podatke" ili vrijednosti u njima. Kako ih koristiti?

Osnovne operacije koje cemo vrsiti nad variablama jesu citanje i pisanje. Variable se koriste za privremeni smijestaj podataka, privremeni zato sto variable postoje sve dok je program pokrenut nako sto se program zaustavi variable se unistavaju i oslobadja se prostor u radnoj memoriji.


----------------------------------------------


d. Pridru¾ivanje

To je u biti smjestanje neke konstante ili sadrzaja neke druge variable unutar neke variable. Za to se koristi := , a ne =

Zvuci komplikovano ?
Da pokusamo sa primjerom ?

primjer:

Program moj_program2;
Var broj1, broj2, zbir : byte; { Deklaracija variabli }
Begin broj1 := 5; { smjesti 5 u broj1 } broj2 := 11; { smjesti 11 u broj2} zbir := broj1 + broj2; { smjesti broj1+broj2 u zbir, tj. 5 + 11 tj. zbir postaje 16} Writeln(zbir); {i konacno pisi sadrzaj variable zbir} End.


Izlaz :

16

Idemo pokusati sa malo naprednijim programom:

Program moj_program3;
Var
broj1, broj2, zbir : Integer;
Begin
broj1 := 101;
broj2 := 35;
zbir := broj1 + broj2;
Writeln('Zbri je : ',zbir);
End.


Da, moguce je vise prarametra proslijediti proceduri WriteLn, parametri se moraju odvojiti sa zarezom, i moraju biti ili vazeca konstanta ili ime variable. Napomena variable se ne stavljaju pod navodnike. Sve pod navodnicima se smatra simbolickom konstantom.

Program Moj_prvi_program_Sa_simbolickim_variablama;
Var
slovo : Char;
recenica : String;
ime : String;
Begin
slovo := 'A';
recenica := 'Trava je zelena..?'; ime := 'Ime ?? stvarno ?, moze biti bilo sta krace od 255 karaktera.'; Writeln('Program koji se igra sa variablama..');
Writeln('Slovo je : ',slovo); Writeln('Recenica je : ', recenica);
Writeln('Ime je : ', ime);
End.

Izlaz :

Program koji se igra sa variablama..
Slovo je : A
Recenica je : Trava je zelena..? Ime je : Ime ?? stvarno ?, moze biti bilo sta krace od 255 karaktera.

Preporucujem malo eksperimentisanja sa pridrizivanjem. Recimo sta ce se desiti ako vise puta pridruzite razlicite stvari istoj variabli ?


npr..

ime := 'Mirza';
ime := 'Alen';
ime := 'no-name';

Writeln('Ime je : ',ime);

izlaz je

Ime je : no-name



5. Sortiranje nizova

*Sortiranje brojeva


Opis algoritma za pronalazenje najmanjeg ili najveceg broja u nizu.

Potrebno je analizirati niz brojeva i sacuvati vrijednosti najveceg i/ili najmanjeg broja unutar tog niza.

Program najveci_manji;
Var
najv,najm,temp : Word;
Begin
najv := 0;
najm := (MaxInt*2)+1;
Writeln('Za kraj unosa unesite 0 ..');
repeat
Write('Unesite broj : ');
Readln(temp);
if temp > najv then najv := temp;
if temp < najm then najm := temp;
until temp = 0;
Writeln('Najveci broj je : ',najv);
Writeln('Najmanji broj je : ',najm);
Writeln('-------------------------');
Writeln('pritisnite ENTER');
Readln;
Writeln;
End.


Variable najv i najm cuvaju trenutno najveci i najmanji broj za odredjeni niz. Prije njihove upotrebe potrebno je inicializirati njihove vrijednosti. Za tip Word najmanja moguca vrijednost je 0 a najveca je 65535. najv prima najmanju mogucu vrijednost a najm prima navecu mogucu vrijednost. Ovo je neophodno za tacnost sortiranja. temp variabla cuva broj koji se trenutno analizira. U ovom slucaju repeat petlja ce se izvrsavati i traziti unos vrijednosti u temp sve dok je temp razlicit od nule. Ostatak programa samo ispisuje vrijednosti najv i najm.

U ovom primjeru nije bilo potrebno koristiti pravi niz mapiran u memoriji, jer su nam potrebne bile samo dvije vrijednosti (najveci i najmanji broj). Takodje nije bilo "pravog" sortiranja samo poredjenje odnosno izdvajanje vrijednosti koje su nam u ovom slucaju bile potrebne.

Sortiranje niza brojeva:

Program sort_niz;
const
max = 50;
type
MojNiz = Array[0..max] of Word;

Var
niz : MojNiz;
broj, trenutni_index,i : Word;
kraj : Boolean;
Begin Writeln('Unesite brojeve (za kraj 0) : ');
trenutni_index := 0;
repeat
inc(trenutni_index);
Write('Broj : ');
Readln(broj);
niz[trenutni_index] := broj;
niz[0] := trenutni_index; until (broj = 0) or (trenutni_index = max); Writeln('Broj unesenih elemenata : ',niz[0]);
repeat
kraj := true; For trenutni_index := 1 to niz[0] do begin For i:=trenutni_index + 1 to niz[0] do begin if niz[trenutni_index] > niz[i] then begin
broj := niz[trenutni_index];
niz[trenutni_index] := niz[i];
niz[i] := broj;
kraj := false;
end;
end;
end;
until kraj;
Writeln('Sortiran niz : ');
For i:=1 to niz[0] do begin
Write(niz[i]);
if i mod 15 = 0 then Writeln;
End;
Readln;
End.

Sortiranje visedimenzionalnih nizova:


Program Sortiraj_MultidimArr;
const
max = 15;
type TMD_Niz = Array[1..max,1..max,1..max,1..max] of byte;

Procedure DodjeliSlucajneVrijednosti(var k : TMD_Niz);
Var
i,j,k,l : Byte;
Begin
Randomize;
For i:=1 to max do
for j:=1 to max do
for k:=1 to max do
for l:=1 to max do begin
k[i,j,k,l] := (Radnom(254)+1);
end;
End;

Procedure PisiVDNiz( niz : TMD_Niz);
Var
i,j,k,l : Byte;
Begin
For i:=1 to max do
for j:=1 to max do
for k:=1 to max do
for l:=1 to max do begin
Write(niz[i,j,k,l]:5);
end;
End;

Procedure SortirajVDNiz(var p : TMD_Niz);
Begin
{? ? ?}
End;

Var
moj_niz : TMD_Niz;
Begin
DodjeliSlucajneVrijednosti(moj_niz);
PisiVDNiz(moj_niz);
SortirajVDNiz(moj_niz);
PisiVDNiz(moj_niz);
Readln;
End.


Sortiranje nizova koristeci QuickSort:

program QSort;
{$R-,S-}

const
Max = Maxint div 2;

type
TNiz = array[1..Max] of byte;

var
niz : TNiz;
i : Word;


procedure QuickSort(var A: Tniz; Lo, Hi: Word);

procedure Sort(l, r: Word);
var
i, j, x, y: Word;
begin
i := l; j := r; x := a[(l+r) DIV 2];
repeat
while a[i] < x do i := i + 1;
while x < a[j] do j := j - 1;
if i <= j then begin
y := a[i];
a[i] := a[j];
a[j] := y;
i := i + 1;
j := j - 1;
end;
until i > j;
if l < j then Sort(l, j);
if i < r then Sort(i, r);
end;

begin
Sort(Lo,Hi);
end;

begin Write('Generisem ',Max,' slucajnih brojeva...');
Randomize; for i := 1 to Max do niz[i] := Random(254)+1;
Writeln;
Write('Sortiram...');
QuickSort(niz, 1, Max);
Writeln; for i := 1 to Max do Write(Data[i]:8); end.


QuickSort algoritam je rekurzivan i kao takav trosi dosta memorije.



o Algoritam koji slijedi je najsporiji od svih navedenih ali zato stedi memoriju i moze da sortira jako veliku kolicinu podataka.

Svi "podaci" se cuvaju u datotekama na disku. Algoritam koristi ukupno 4 datoteke (zajedno sa pocetnom), oznacimo ih sa P - pocenta, A,B i C su privremene.

Prvi korak je podjela P datoteke na A i B tako da jedna polovica P datoteke je smjestena u A a druga u B datoteku. Brojevi se prepisuju u datoteku A sve dok ne remete pravila sortiranja (od manjeg ka vecem ili obratno) kada naidje broj koji ne zadovoljava kriterije sortiranja on se zapisuje u B datoteku, broj nakon ovoga se pise opet u B datoteku samo ako je veci od predhodnog zapisanog (tj. ako zadovoljava pravila sortiranja) ako je manji broj se pise u A i ovaj proces se nastavlja sve dok ima brojeva u datoteci P. Datoteka P ostaje ne promjenjena jer cuva pocetno stanje (prije sortiranja). Umjesto datoteke P koristimo datoteku C. C cemo kreirati spajanjem A i B datoteke. Potrebno je istovremeno otvoriti i A i B datoteku i ucitavati broj za brojem i upisivati u C onaj manji, bilo da je on iz A ili B datoteke. Ukoliko se desi da u jednoj datoteci nestane brojeva preostali dio brojeva u drugoj se samo prepise na kraj datoteke C. Nakon sto je datoteka C kreirana datoteke A i B se brisu i nastavlja se sa ponovnim prepisivanjem brojeva iz C u A i B na isti nacin kao sto je to predhodno radjeno sa P datotekom. Ovaj proces rastavljanja datoteke C na A i B, zatim spajanje A i B u C se ponavlja sve dok je moguce rastaviti C na dvije datoteke jer samo tada postoji broj koji nije na svom mjestu (krsi pravila sortiranja).

kostur programa:

while rastavi(c) do begin
sastavi(a,b);
end;


kada rastavi vrati false to znaci da nije u stanju da rastavi datoteku sto istovremeno oznacava kraj sortiranja.



Sortiranje nizova koristeci bubble-sort algoritam:
{
        Implementacija bubble-sort algoritma
        prema opisu iz "Algoritmi u programskom jezku C"

        konstantan broj prolaza! isto kao u ssortu.
        osim ako ne koristim boolean switch za oznaèavanje
        kraja
}
Program bsort;
Uses Sorting;
Var
	niz : Tniz;

Procedure Sort;
Var
	i,j, temp : Integer;
        kraj : Boolean;
Begin
	Write('BSORT ...');
	prolaz := 0;
        For i := MAX-1 downto 1 do begin
        	kraj := true;
              For j:=1 to i do begin
              	if niz[j] > niz[j+1] then begin
                	temp := niz[j];
                        niz[j] := niz[j+1];
                        niz[j+1] := temp;
                        kraj := False;
                end;
                Inc(prolaz);
              end;
              if kraj then Break;
        end;
        Writeln(' Done.');
End;

Begin
        NizInit(niz);
        Sort;
        Writeln(prolaz);
        Readln;
End.



Sortiranje nizova koriateci Insertion Sort algoritam:
{
        Insertion Sort

        Implementacija Insertion Sort algoritma
        prema opisu iz "Algoritmi u programskom jeziku C"
        neoptimiziana verzija (brza od ssort-a)
}
Program InsertionSort;
Const
	MAX = 10000;
Var
        niz : Array[1..MAX] of Integer;
        prolaz : Longint;

Function Predznak:Integer;
Begin
	if Random(MAXINT) mod (Random(10)+1) = 0 then Predznak := -1
        	else Predznak := 1;
End;

Procedure NizInit;
Var
	i : Integer;
Begin
	Write('Init...');
	Randomize;
        For i:=1 to MAX do niz[i] := Random(MAXINT-1) * Predznak;
        Writeln(' Done.');
End;

Procedure Pisi;
Var
	i : Integer;
Begin
	Writeln('-----------------------------');
	For i:=1 to MAX do Writeln(i:5,' ',niz[i]:10);
End;

Procedure Sortiraj;
Var
	i,j,temp : Integer;
Begin
	Write('ISORT...');
        prolaz := 0;
	For i:=1 to MAX do begin
        	j := i;
        	While (j>1) and (niz[j]<niz[j-1]) do begin
                        temp := niz[j];
                        niz[j] := niz[j-1];
                        niz[j-1] := temp;
                        Dec(j);
                        Inc(prolaz);
                end;
        end;
        Writeln(' Done.');
End;

Begin
	NizInit;
{        Pisi;}
        Sortiraj;
{        Pisi;}
	Writeln(prolaz); {VARIABILAN !!}
        Readln;
End.



Sortiranje nizova koristeci Selection sort algoritam:
{
        Implementacija Selection sort algoritma prema
        opisu iz "Algoritmi u Programskom Jeziku C"
        (neoptimizirana varianta?)
        Broj prolaza nije variabilan!!!! u ovoj verziji
}
Program SelectionSort;
Const
	MAX = 10000;
Var
        niz : Array[1..MAX] of Integer;
	prolaz : Longint;

Function Predznak:Integer;
Begin
	if Random(MAXINT) mod (Random(10)+1) = 0 then Predznak := -1
        	else Predznak := 1;
End;

Procedure NizInit;
Var
	i : Integer;
Begin
	Write('Init... ');
	Randomize;
        For i:=1 to MAX do niz[i] := Random(MAXINT-1) * Predznak;
        Writeln('Done.');
End;

Procedure Pisi;
Var
	i : Integer;
Begin
	Writeln('-----------------------------');
	For i:=1 to MAX do Writeln(i:5,' ',niz[i]:10);
End;

Procedure Sortiraj;
Var
	i,j,temp : Integer;
Begin
	Write('SSORT... ');
        prolaz := 0;
	For i:=1 to MAX-1 do begin
        	For j:=i+1 to MAX do begin
                	if niz[i] > niz[j] then begin
                        	temp := niz[j];
                                niz[j] := niz[i];
                                niz[i] := temp;
                        end;
                        Inc(prolaz);
                end;
        end;
        Writeln('Done.');
End;

Begin
	NizInit;
{        Pisi;}
        Sortiraj;
{        Pisi;}
	Writeln(prolaz);
        Readln;
End.



LITERATURA:

 PASCAL "AN INTRODUCTION TO THE ART AND SCIENCE OF PROGRAMMING" , Fourth Edition by Walter Savitch
 Algoritmi u Programskom Jeziku C


